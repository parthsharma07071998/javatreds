package com.xlx.treds.auction.bo;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.math.BigDecimal;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.FileAttribute;
import java.sql.Connection;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.activation.DataHandler;
import javax.mail.internet.MimeBodyPart;
import javax.mail.util.ByteArrayDataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.io.Files;
import com.xlx.common.base.CommonConstants;
import com.xlx.common.messaging.EmailSender;
import com.xlx.common.registry.RegistryHelper;
import com.xlx.common.utilities.CommonUtilities;
import com.xlx.common.utilities.DBHelper;
import com.xlx.common.utilities.FormatHelper;
import com.xlx.commonn.CommonAppConstants;
import com.xlx.commonn.CompositeGenericDAO;
import com.xlx.treds.AppConstants;
import com.xlx.treds.TredsHelper;
import com.xlx.treds.auction.bean.FinancierAuctionSettingBean;
import com.xlx.treds.auction.bean.MISFinancierReportBean;
import com.xlx.treds.auction.bean.ObligationBean;
import com.xlx.treds.instrument.bean.FactoringUnitBean;
import com.xlx.treds.user.bean.AppUserBean;

public class FinancierSettlementFileGenerator {
    private static final Logger logger = LoggerFactory.getLogger(FinancierSettlementFileGenerator.class);

    public static final String RESP_RECORD_SEPARATOR = "\r\n";
    public static final String RECORD_SEPARATOR = "\n";
    public static final String FIELD_SEPARATOR = "|";
    public static final String DATE_FORMAT = AppConstants.DATE_FORMAT;
    public static final String REGISTRY_EXTRANET_ROOT_FOLDER = "server.settings.extranetpath";
    public static final String FILE_EXTENSION = "txt";
    public static final String IN_FOLDER = "IN";
    //
    public static int ROW_DATA_AMOUNT = 0;
    public static int ROW_DATA_DEBIT_AC = 1;
    public static int ROW_DATA_CREDIT_AC = 2;
    public static int ROW_DATA_TRANS_TYPE = 3;
    public static int ROW_DATA_DATE = 4;
    public static int ROW_DATA_SIZE = 5;
    //
    public static final String LOG_HEADER = "Fin. Settlement File Gen.";
    public static final String LOG_HEADER_2 = "Fin. MIS File Gen.";
    //
	private static final String FILE_HEADER = "Unique Reference Number,Debit Amount,Payment date,Debit A/C No,Credit A/C No,FU ID,FU Amount,Buyer Name,Seller Name,Accepted Bid Rate,Transaction type";
	private static final String FILE_HEADER_2 = "Instrument number - Autogenerated by RXIL,Factoring Unit value,Amount ,Financier Name,Financier Account Number,Debit Amount,Debit Date,Buyer Name,Buyer Code,Buyer PAN,Interest Amount,Debit Date,Seller Name,Seller Code,Seller PAN,Discounting Rate,Haircut(%),Haircut Amount,Due date,tenor,buyerRef,Interest_overdue,Principal Overdue,No. of amendments,Leg type,Description of goods,Invoice raise date,Invoice number";
    //
    private CompositeGenericDAO<FinancierSettlementInfoBean> financierSettlementInfoDao = null;
	
	public FinancierSettlementFileGenerator(){
		financierSettlementInfoDao = new CompositeGenericDAO<FinancierSettlementInfoBean>(FinancierSettlementInfoBean.class);
	}
	
	public int[] generateLegFile(Connection pConnection, Date pSettlementDate, ObligationBean.Type pLeg, String pFinancierCode) throws Exception{
		return generateLegFile(pConnection, pSettlementDate, pLeg, pFinancierCode, false);
	}
	public int[] generateLegFile(Connection pConnection, Date pSettlementDate, ObligationBean.Type pLeg, String pFinancierCode, boolean pUseSettlementDate) throws Exception{
		int lRetVal[] = { 0, 0 };
	    int lFinCount=0, lFileCount=0;
		StringBuilder lSql = new StringBuilder();
		DBHelper lDBHelper = DBHelper.getInstance();
		List<MimeBodyPart> lListAttach = new ArrayList<MimeBodyPart>();
		MimeBodyPart lMimeBodyPart = null;
		//
		logger.info(LOG_HEADER + " : Generating Financier Settlement File for " + (pLeg!=null?pLeg.getCode():"") + " dated " + (pSettlementDate!=null?FormatHelper.getDisplay(DATE_FORMAT,pSettlementDate):"") );
		//
		lSql.append(" SELECT FUPurchaser, FUSupplier, FUFinancier, FUId, FUACCEPTEDRATE, FUAMOUNT ");
		lSql.append(" , OBId, OBFUId, OBDate, OBSettledDate, OBTxnType, OBType, OBAmount, OBSTATUS, OBPAYDETAIL1,OBIsUpfrontOblig,OBEXTENDEDDAYS ");
		lSql.append(" , FUFactoredAmount, FUPurchaserLeg1Interest, FUSupplierLeg1Interest, FUPurchaserLeg2Interest, FULeg2ExtensionInterest ");
		lSql.append(" , FASFin.FASFinancierRef FASFinancierRef ");
		lSql.append(" , FASPur.FASPurchaserRef FASPurchaserRef ");
		lSql.append(" , FASSup.FASSupplierRef FASSupplierRef ");
		lSql.append(" FROM Obligations, FactoringUnits ");
		lSql.append(" LEFT OUTER JOIN FinancierAuctionSettings FASFin ");
		lSql.append(" 	ON FUFinancier = FASFin.FASFinancier AND FASFin.FASLevel = ").append(lDBHelper.formatString(FinancierAuctionSettingBean.Level.Financier_Self.getCode()));
		lSql.append(" LEFT OUTER JOIN FinancierAuctionSettings FASPur ");
		lSql.append(" 	ON FUFinancier = FASPur.FASFinancier AND FUPurchaser = FASPur.FASPurchaser AND FASPur.FASLevel = ").append(lDBHelper.formatString(FinancierAuctionSettingBean.Level.Financier_Buyer.getCode()));
		lSql.append(" LEFT OUTER JOIN FinancierAuctionSettings FASSup ");
		lSql.append(" 	ON FUFinancier = FASSup.FASFinancier AND FUPurchaser = FASPur.FASPurchaser AND FUSupplier = FASPur.FASSupplier AND FASSup.FASLevel = ").append(lDBHelper.formatString(FinancierAuctionSettingBean.Level.Financier_Buyer_Seller.getCode()));
		lSql.append(" WHERE OBRecordVersion > 0 AND FURecordVersion > 0 ");
		lSql.append(" AND OBFUId = FUId  ");
		lSql.append(" AND FUFinancier = OBTxnEntity ");
		lSql.append(" AND OBType = ").append(lDBHelper.formatString(pLeg.getCode()));
		if(ObligationBean.Type.Leg_1.equals(pLeg)){
			if(pUseSettlementDate) {
				lSql.append(" AND OBSETTLEDDATE = ");
			}else {
				lSql.append(" AND OBDate = ");
			}
			lSql.append(lDBHelper.formatDate(pSettlementDate));
			lSql.append(" AND OBStatus IN ( ").append(lDBHelper.formatString(ObligationBean.Status.Ready.getCode()));
			lSql.append(CommonConstants.COMMA).append(lDBHelper.formatString(ObligationBean.Status.Sent.getCode()));
			lSql.append(CommonConstants.COMMA).append(lDBHelper.formatString(ObligationBean.Status.Created.getCode())).append(" ) ");
		}else if(ObligationBean.Type.Leg_2.equals(pLeg)){
			if(pUseSettlementDate) {
				lSql.append(" AND OBSETTLEDDATE = ");
			}else {
				lSql.append(" AND OBDate = ");
			}
			lSql.append(lDBHelper.formatDate(pSettlementDate));
			lSql.append(" AND OBStatus = ").append(lDBHelper.formatString(ObligationBean.Status.Success.getCode()));
		}
		if(CommonUtilities.hasValue(pFinancierCode)){
			lSql.append(" AND FUFinancier = ").append(lDBHelper.formatString(pFinancierCode));
		}
		lSql.append(" ORDER BY FUFinancier, FUId, OBType ");
		//
		List<FinancierSettlementInfoBean> lFSInfoBeans =  financierSettlementInfoDao.findListFromSql(pConnection, lSql.toString(), 0);
		// again check 
		if(lFSInfoBeans!=null && lFSInfoBeans.size() > 0){
			//make same list and just copy the financier obligation in the new list // set lFSInfoBeans=new list
			//while looping skip treds obligations and make a fuid wise hash list of fina
		}
			
		if(lFSInfoBeans!=null && lFSInfoBeans.size() > 0){
			logger.info("lFSInfoBeans Count : " + lFSInfoBeans.size());
			ObligationBean lObligBean = null;
			FactoringUnitBean lFuBean = null;
			FinancierAuctionSettingBean lFASBean = null;
			String lPrevFinancier = null, lDateStr=null;
			ObligationBean.Type lPrevLeg = null;
			StringBuilder lData = null;
		    final File lHomeDir = new File(RegistryHelper.getInstance().getString(REGISTRY_EXTRANET_ROOT_FOLDER));
		    List<String[]> lListRows = null;
		    String[] lRowData = null;
		    List<String> lFailedFinancier = new ArrayList<String>();
		    TredsHelper lTredsHelper = TredsHelper.getInstance();
		    BigDecimal lTotalInt = null;
			try{
				//for fail safe 
			    if (!lHomeDir.exists()) 
			    	lHomeDir.mkdir();
			}catch(Exception lEx){
				logger.info(LOG_HEADER + " : Error while finding Root Folder : " + RegistryHelper.getInstance().getString(REGISTRY_EXTRANET_ROOT_FOLDER));
			}
			//
			lDateStr = FormatHelper.getDisplay("ddMMyyHHmmss", pSettlementDate);
			
			//
			for(FinancierSettlementInfoBean lFSInfoBean : lFSInfoBeans){
				lObligBean = lFSInfoBean.getObligationBean();
				lFuBean = lFSInfoBean.getFactoringUnitBean();
				lFASBean = lFSInfoBean.getFinancierAuctionSettingBean();
				//
				//put the L1T1 in the RespRemarks
				//
				//skipping writing to file at financier level
				//if file write for one financier fails still continuing for other financiers
				if(lFailedFinancier.contains(lFuBean.getFinancier())){
					logger.info(LOG_HEADER + " : Skipping Financier : "+lFuBean.getFinancier());
					continue;
				}
				try{
					if(!(lFuBean.getFinancier().equals(lPrevFinancier) && 
							lObligBean.getType().equals(lPrevLeg)) ){
						if(!(lFuBean.getFinancier().equals(lPrevFinancier))) lFinCount++;
						//save the previously accumulated data of the Prev Financier to the file
						//since the current record is of new financier.
						if(lData!=null){
							//using lPrevFinancier save the data to file
							//file name : CUSTCODE_FORMATL1T_DDMMYYHHMMSS.csv
							if(createFile(lHomeDir, lPrevFinancier, pLeg, lDateStr, lData)){
								lFileCount++;
								lMimeBodyPart = getFileAsAttachment(lPrevFinancier, pLeg, lDateStr, lData);
								lListAttach.add(lMimeBodyPart);
							}
						}
						//then break for new file
						lData = new StringBuilder();
						//
					}
					//
					//each row will consist of following fields
					//Unique Reference Number, Debit Amount, Payment date, 
					//Debit A/C No, Credit A/C No, FU ID, FU Amount, 
					//Buyer Name, Seller Name, Accepted Bid Rate, Transaction type
					lListRows = new ArrayList<String[]>();
					if(ObligationBean.TxnType.Debit.equals(lObligBean.getTxnType()) && 
							ObligationBean.Type.Leg_1.equals(lObligBean.getType())){
						logger.info("obid : " + lObligBean.getId() + " :: fuid : "+ lObligBean.getFuId());
						//L1T1 : factoredamount buyerRef
						lRowData = new String[ROW_DATA_SIZE];
						lRowData[ROW_DATA_AMOUNT] = lObligBean.getAmount().toString(); //DebitAmt
						lRowData[ROW_DATA_DEBIT_AC] = lFASBean.getPurchaserRef(); //DebitAccountNo
						lRowData[ROW_DATA_CREDIT_AC] =  lTredsHelper.getDesignatedBankAccountNumber(pConnection, lFuBean.getFinancier()) ; //CreditAccountNo -- come from registration
						lRowData[ROW_DATA_TRANS_TYPE] = "L1T1"; //TransactionType
						lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
						lListRows.add(lRowData);
						//IF (purchareleg1inteer) THEN L1T2 : purchareleg1inteer, buyerref
						//IF (sellerleg1inteer) THEN L1T2 : sellerleg1inteer, sellerref
						if((lFuBean.getPurchaserLeg1Interest() != null && lFuBean.getPurchaserLeg1Interest().doubleValue() > 0.0) ||
							(lFuBean.getSupplierLeg1Interest() != null && lFuBean.getSupplierLeg1Interest().doubleValue() > 0.0) ){
							lRowData = new String[ROW_DATA_SIZE];
							lTotalInt = new BigDecimal(0);
							if(lFuBean.getPurchaserLeg1Interest() != null) lTotalInt = lTotalInt.add(lFuBean.getPurchaserLeg1Interest());
							if(lFuBean.getSupplierLeg1Interest() != null) lTotalInt = lTotalInt.add(lFuBean.getSupplierLeg1Interest());
							lRowData[ROW_DATA_AMOUNT] = lTotalInt.toString(); //DebitAmt
							lRowData[ROW_DATA_DEBIT_AC] = lFASBean.getPurchaserRef(); //DebitAccountNo
							lRowData[ROW_DATA_CREDIT_AC] = lFASBean.getFinancierRef(); //CreditAccountNo
							lRowData[ROW_DATA_TRANS_TYPE] = "L1T2"; //TransactionType
							lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
							lListRows.add(lRowData);
						}
					}else if(ObligationBean.TxnType.Credit.equals(lObligBean.getTxnType()) && 
							ObligationBean.Type.Leg_2.equals(lObligBean.getType())){
						logger.info("obid : " + lObligBean.getId() + " :: fuid : "+ lObligBean.getFuId());
						//L2T1 : factoredamount buyerRef
						if (lObligBean.getExtendedDays()==null) {
							lRowData = new String[ROW_DATA_SIZE];
							lRowData[ROW_DATA_AMOUNT] = lFuBean.getFactoredAmount().toString(); //DebitAmt
							lRowData[ROW_DATA_DEBIT_AC] = lObligBean.getPayDetail1(); //DebitAccountNo
							lRowData[ROW_DATA_CREDIT_AC] = lFASBean.getPurchaserRef(); //CreditAccountNo
							lRowData[ROW_DATA_TRANS_TYPE] = "L2T1"; //TransactionType
							lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
							lListRows.add(lRowData);
							//TODO: this condition is not arising since interest is collected in leg1
							//IF (purchaserleg2interest) THEN L2T2 : purchaserleg2interest buyerref
							if(lFuBean.getPurchaserLeg2Interest()!=null && lFuBean.getPurchaserLeg2Interest().doubleValue() > 0.0){
								lRowData = new String[ROW_DATA_SIZE];
								lRowData[ROW_DATA_AMOUNT] = lFuBean.getPurchaserLeg2Interest().toString(); //DebitAmt
								lRowData[ROW_DATA_DEBIT_AC] = lObligBean.getPayDetail1(); //DebitAccountNo
								lRowData[ROW_DATA_CREDIT_AC] = lFASBean.getPurchaserRef(); //CreditAccountNo
								lRowData[ROW_DATA_TRANS_TYPE] = "L2T2"; //TransactionType
								lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
								lListRows.add(lRowData);
							}
						}else {
							if (CommonAppConstants.Yes.Yes.equals(lObligBean.getIsUpfrontOblig())) {
								lRowData = new String[ROW_DATA_SIZE];
								lRowData[ROW_DATA_AMOUNT] = lFuBean.getLeg2ExtensionInterest().toString(); //DebitAmt
								lRowData[ROW_DATA_DEBIT_AC] = lObligBean.getPayDetail1(); //DebitAccountNo
								lRowData[ROW_DATA_CREDIT_AC] = lFASBean.getPurchaserRef(); //CreditAccountNo
								lRowData[ROW_DATA_TRANS_TYPE] = "L2T2"; //TransactionType
								lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
								lListRows.add(lRowData);
								//TODO: this condition is not arising since interest is collected in leg1
								//IF (purchaserleg2interest) THEN L2T2 : purchaserleg2interest buyerref
								if(lFuBean.getPurchaserLeg2Interest()!=null && lFuBean.getPurchaserLeg2Interest().doubleValue() > 0.0){
									lRowData = new String[ROW_DATA_SIZE];
									lRowData[ROW_DATA_AMOUNT] = lFuBean.getPurchaserLeg2Interest().toString(); //DebitAmt
									lRowData[ROW_DATA_DEBIT_AC] = lObligBean.getPayDetail1(); //DebitAccountNo
									lRowData[ROW_DATA_CREDIT_AC] = lFASBean.getPurchaserRef(); //CreditAccountNo
									lRowData[ROW_DATA_TRANS_TYPE] = "L2T2"; //TransactionType
									lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
									lListRows.add(lRowData);
								}
							}else {
								lRowData = new String[ROW_DATA_SIZE];
								lRowData[ROW_DATA_AMOUNT] = lFuBean.getFactoredAmount().toString(); //DebitAmt
								lRowData[ROW_DATA_DEBIT_AC] = lObligBean.getPayDetail1(); //DebitAccountNo
								lRowData[ROW_DATA_CREDIT_AC] = lFASBean.getPurchaserRef(); //CreditAccountNo
								lRowData[ROW_DATA_TRANS_TYPE] = "L2T1"; //TransactionType
								lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
								lListRows.add(lRowData);
								//TODO: this condition is not arising since interest is collected in leg1
								//IF (purchaserleg2interest) THEN L2T2 : purchaserleg2interest buyerref
								if(lFuBean.getPurchaserLeg2Interest()!=null && lFuBean.getPurchaserLeg2Interest().doubleValue() > 0.0){
									lRowData = new String[ROW_DATA_SIZE];
									lRowData[ROW_DATA_AMOUNT] = lFuBean.getPurchaserLeg2Interest().toString(); //DebitAmt
									lRowData[ROW_DATA_DEBIT_AC] = lObligBean.getPayDetail1(); //DebitAccountNo
									lRowData[ROW_DATA_CREDIT_AC] = lFASBean.getPurchaserRef(); //CreditAccountNo
									lRowData[ROW_DATA_TRANS_TYPE] = "L2T2"; //TransactionType
									lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
									lListRows.add(lRowData);
								}
								if(lFuBean.getLeg2ExtensionInterest()!=null && lFuBean.getLeg2ExtensionInterest().doubleValue() > 0.0){
									lRowData = new String[ROW_DATA_SIZE];
									lRowData[ROW_DATA_AMOUNT] = lFuBean.getLeg2ExtensionInterest().toString(); //DebitAmt
									lRowData[ROW_DATA_DEBIT_AC] = lObligBean.getPayDetail1(); //DebitAccountNo
									lRowData[ROW_DATA_CREDIT_AC] = lFASBean.getPurchaserRef(); //CreditAccountNo
									lRowData[ROW_DATA_TRANS_TYPE] = "L2T2"; //TransactionType
									lRowData[ROW_DATA_DATE] = FormatHelper.getDisplay(DATE_FORMAT, lObligBean.getDate()); //date
									lListRows.add(lRowData);
									//TODO: this condition is not arising since interest is collected in leg1
								}
							}
						}
					}
					//
					for(int lPtr=0; lPtr < lListRows.size(); lPtr++){
						lRowData = lListRows.get(lPtr);
						if(lData.length() > 0) lData.append(RECORD_SEPARATOR);
						lData.append(lObligBean.getId()).append(FIELD_SEPARATOR);
						lData.append(lRowData[ROW_DATA_AMOUNT]).append(FIELD_SEPARATOR); //DebitAmt
						lData.append(lRowData[ROW_DATA_DATE]).append(FIELD_SEPARATOR);//Date
						lData.append(lRowData[ROW_DATA_DEBIT_AC]).append(FIELD_SEPARATOR); //DebitAccountNo
						lData.append(lRowData[ROW_DATA_CREDIT_AC]).append(FIELD_SEPARATOR); //CreditAccountNo
						lData.append(lFuBean.getId()).append(FIELD_SEPARATOR);
						lData.append(lFuBean.getAmount()).append(FIELD_SEPARATOR);
						lData.append(lFuBean.getPurName()).append(FIELD_SEPARATOR);
						lData.append(lFuBean.getSupName()).append(FIELD_SEPARATOR);
						lData.append(lFuBean.getAcceptedRate()).append(FIELD_SEPARATOR);
						lData.append(lRowData[ROW_DATA_TRANS_TYPE]); //TransactionType
					}
				}catch(Exception lEx){
					logger.info(LOG_HEADER + " : "+lEx.getMessage());
					lFailedFinancier.add(lFuBean.getFinancier());
					lData = new StringBuilder();
				}
				//
				lPrevFinancier = lFuBean.getFinancier();
				lPrevLeg = lObligBean.getType();
			}
			//
			if (lData != null && lData.length() > 0){
				//same logic written in start of loop
				if(createFile(lHomeDir, lPrevFinancier, lPrevLeg, lDateStr, lData)){
					lFileCount++;
					lMimeBodyPart = getFileAsAttachment(lPrevFinancier, lPrevLeg, lDateStr, lData);
					lListAttach.add(lMimeBodyPart);
				}
			}
		}
		if(lFinCount > 0){
			if(lFinCount > 0){
				Map<String, Object> lMailData = new HashMap<String, Object>();
				lMailData.put(EmailSender.TO, TredsHelper.getInstance().getAdminUserEmail(AppConstants.DOMAIN_PLATFORM));
				lMailData.put(EmailSender.ATTACHMENTS,lListAttach);
				EmailSender.getInstance().addMessage(AppConstants.TEMPLATE_FINSETTLE_LEGFILE, (HashMap)lMailData);
			}
		}
		lRetVal = new int[] {lFinCount, lFileCount };
		return lRetVal;
	}
	
	private boolean createFile(File pHomeDir, String pFinancierCode, ObligationBean.Type pLeg, String pDateStr, StringBuilder pData){
		//using lPrevFinancier save the data to file
		//file name : CUSTCODE_FORMATL1T_DDMMYYHHMMSS.csv
		String lFileName = null;
		File lFile = null;
		try {
			if(!CommonUtilities.hasValue(pFinancierCode)){
				logger.info(LOG_HEADER + " : Financier Code blank.");
				return false;
			}
			if(pLeg == null){
				logger.info(LOG_HEADER + " : Leg not found.");
				return false;
			}			
		    final File lDir = new File(pHomeDir, pFinancierCode + File.separator + pFinancierCode + File.separator + IN_FOLDER);
		    try{
				Path destinationDir = Paths.get(lDir.getCanonicalPath());
				java.nio.file.Files.createDirectories(destinationDir, new FileAttribute[] {});
		    	
		    }catch(Exception ex1){
				logger.info(LOG_HEADER + " : Unable to create " + lDir.getAbsolutePath());
				return false;
		    }

			lFileName = getFileName(pFinancierCode, pLeg, pDateStr);
			lFile = new File( lDir.getCanonicalPath() + File.separator + lFileName + ".tmp");
			StringBuilder lTemp = new StringBuilder();
			lTemp.append(FILE_HEADER.replace(",", FIELD_SEPARATOR) + RECORD_SEPARATOR);
			lTemp.append(pData.toString());
			Files.write(lTemp.toString().getBytes(), lFile);
			//rename the file to 
			Files.move(lFile, new File( lDir.getCanonicalPath() + File.separator + lFileName));
			//
			logger.info(LOG_HEADER+": File Created Successfully for Financier : " + pFinancierCode + " :: File : "+lFileName);
			return true;
		} catch (Exception e) {
			logger.info(LOG_HEADER + " : Error while creating file : " + (lFileName!=null?lFileName:"") + " for financier : "+ pFinancierCode + " for " + pLeg.getCode());
		}
		return false;
	}
	
	private String getFileName(String pFinancierCode, ObligationBean.Type pLeg, String pDateStr){
		return "TREDS_TREDSUP_"+pFinancierCode+"_"+ pLeg.getCode() + "_"+pDateStr + "." + FILE_EXTENSION;		
	}
	
	private MimeBodyPart getFileAsAttachment(String pFinancierCode, ObligationBean.Type pLeg, String pDateStr, StringBuilder pData){
    	ByteArrayOutputStream lByteArrayOutputStream = null;
    	try{
    		
        	lByteArrayOutputStream = new ByteArrayOutputStream();
			StringBuilder lTemp = new StringBuilder();
			lTemp.append(FILE_HEADER.replace(",", FIELD_SEPARATOR) + RECORD_SEPARATOR);
			lTemp.append(pData.toString());
			lByteArrayOutputStream.write(lTemp.toString().getBytes());
		    lByteArrayOutputStream.close();
		    //
		    MimeBodyPart lMimeBodyPart = new MimeBodyPart();
			lMimeBodyPart.setDataHandler(new  DataHandler(new ByteArrayDataSource(lByteArrayOutputStream.toByteArray(), "application/csv")));
			lMimeBodyPart.setFileName(getFileName(pFinancierCode, pLeg, pDateStr));
			return lMimeBodyPart;
		} 
		catch (Exception ex) 
		{
			logger.info("Err in getFileAsAttachment " + ex.getMessage());
		}
		return null;
	}
	
	public int[] generateMISReportFile(Connection pConnection, java.util.Date pStartObligationDate, java.util.Date pEndObligationDate, String pFinancierCode) throws Exception{
		int lRetVal[] = { 0, 0 };
	    int lFinCount=0, lFileCount=0;
    	AppUserBean lAppUserBean = new AppUserBean();
    	StringBuilder lData = null;
        ObligationBO lObligationBO = new ObligationBO();
        java.util.Date lDate = null;
    	//
        if(pStartObligationDate!=null) 
        	lDate = pStartObligationDate;
        else if (pEndObligationDate != null)
        	lDate = pEndObligationDate;
        else 
        	lDate = TredsHelper.getInstance().getBusinessDate();
		//
        Map<String,List<MISFinancierReportBean>> lFinWiseReportData = lObligationBO.getMISFinancierReport(pConnection, lAppUserBean, lDate);
    	//
	    final File lHomeDir = new File(RegistryHelper.getInstance().getString(REGISTRY_EXTRANET_ROOT_FOLDER));
		try{
			//for fail safe 
		    if (!lHomeDir.exists()) {
				logger.info(LOG_HEADER_2 + " : Unable to create " + lHomeDir.getAbsolutePath());
		    	lHomeDir.mkdir();
		    }
		}catch(Exception lEx){
			logger.info(LOG_HEADER_2 + " : Error while finding Root Folder : " + RegistryHelper.getInstance().getString(REGISTRY_EXTRANET_ROOT_FOLDER));
			return lRetVal;
		}
		//
		List<MISFinancierReportBean> lFinMISReportData = null;
		List<MimeBodyPart> lListAttach = new ArrayList<MimeBodyPart>();
		MimeBodyPart lMimeBodyPart = null;
		if(lFinWiseReportData!=null){
			for(String lFinancier : lFinWiseReportData.keySet()){
				lFinMISReportData = lFinWiseReportData.get(lFinancier);
	    		lData = lObligationBO.getMISFinancierReportFileData(pConnection, lFinMISReportData, lDate);
	    		if(lData!=null && lData.length() > 0){
					if(createMISFile(lHomeDir, lFinancier, lData, lDate)){
	        			lFinCount++;
	        			lFileCount++;
						lMimeBodyPart = getMISFileAsAttachment(lFinancier, lData, lDate);
						lListAttach.add(lMimeBodyPart);
					}
	    		}
			}
		}
		//
		if(lFinCount > 0){
			Map<String, Object> lMailData = new HashMap<String, Object>();
			lMailData.put(EmailSender.TO, TredsHelper.getInstance().getAdminUserEmail(AppConstants.DOMAIN_PLATFORM));
			lMailData.put(EmailSender.ATTACHMENTS,lListAttach);
			EmailSender.getInstance().addMessage(AppConstants.TEMPLATE_FINSETTLE_MISFILE, (HashMap)lMailData);
		}
        //
		lRetVal = new int[] {lFinCount, lFileCount };
		return lRetVal;
	}
	
	private boolean createMISFile(File pHomeDir, String pFinancierCode, StringBuilder pData, java.util.Date pBusinessDate){
		//using lPrevFinancier save the data to file
		//file name : CUSTCODE_FORMATL1T_DDMMYYHHMMSS.csv
		//MIS Upload File Name (Change proposed by ICICI on 15/12/2017)
		//TREDS_TREDSMIS_MIS_DE0000029_20092017.txt

		String lFileName = null;
		File lFile = null;
		try {
			if(!CommonUtilities.hasValue(pFinancierCode)){
				logger.info(LOG_HEADER_2 + " : Financier Code blank.");
				return false;
			}
		    final File lDir = new File(pHomeDir, pFinancierCode + File.separator + pFinancierCode + File.separator + IN_FOLDER);
			try{
				Path destinationDir = Paths.get(lDir.getCanonicalPath());
				java.nio.file.Files.createDirectories(destinationDir, new FileAttribute[] {});
			}catch(Exception e1){
				logger.info(LOG_HEADER_2 + " : Unable to create " + lDir.getAbsolutePath());
				return false;
			}
			lFileName = getMISFileName(pFinancierCode, pBusinessDate);
			lFile = new File(lDir.getCanonicalPath() + File.separator + lFileName+".tmp");

			StringBuilder lTemp = new StringBuilder();
			lTemp.append(FILE_HEADER_2.replace(",", FIELD_SEPARATOR) + RECORD_SEPARATOR);
			lTemp.append(pData.toString());

			Files.write(lTemp.toString().getBytes(), lFile);
			//rename the file to 
			Files.move(lFile, new File( lDir.getCanonicalPath() + File.separator + lFileName));
			logger.info(LOG_HEADER_2 + ": File Created Successfully for Financier : " + pFinancierCode + " :: File : "+lFileName);
			return true;
		} catch (Exception e) {
			logger.info(LOG_HEADER_2 + " : Error while creating MIS file : " + (lFileName!=null?lFileName:"") + " for financier : "+ pFinancierCode);
		}
		return false;
	}

	private String getMISFileName(String pFinancierCode, java.util.Date pBusinessDate){
		return "TREDS_TREDSMIS_MIS_"+ pFinancierCode+"_"+ FormatHelper.getDisplay("ddMMyyyy", pBusinessDate) + "." + FILE_EXTENSION;
	}
	
	private MimeBodyPart getMISFileAsAttachment(String pFinancierCode, StringBuilder pData, java.util.Date pBusinessDate){
		ByteArrayOutputStream lByteArrayOutputStream = null;
    	try{
    		lByteArrayOutputStream = new ByteArrayOutputStream();
			StringBuilder lTemp = new StringBuilder();
			lTemp.append(FILE_HEADER_2.replace(",", FIELD_SEPARATOR) + RECORD_SEPARATOR);
			lTemp.append(pData.toString());
			lByteArrayOutputStream.write(lTemp.toString().getBytes());
		    lByteArrayOutputStream.close();
		    //
		    MimeBodyPart lMimeBodyPart = new MimeBodyPart();
			lMimeBodyPart.setDataHandler(new  DataHandler(new ByteArrayDataSource(lByteArrayOutputStream.toByteArray(), "application/csv")));
			lMimeBodyPart.setFileName(getMISFileName(pFinancierCode, pBusinessDate));
			return lMimeBodyPart;
		} 
		catch (Exception ex) 
		{
			logger.info("Error in getMISFileAsAttachment : " + ex.getMessage());
		}
		return null;
	}
}
